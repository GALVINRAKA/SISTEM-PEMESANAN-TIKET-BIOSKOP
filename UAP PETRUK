//NAMA KELOMPOK 1 B
//Galvin Citraka Pandya Nugraha (2317051014)
//Purwati Ayu Utami (2357051007)
//Allisya Syakdari (2317051017)

//SISTEM PEMESANAN TIKET BIOSKOP


//Dikerjakan Oleh Purwati Ayu Utami (2357051007)

#include <iostream>
#include <vector>
#include <string>
#include <queue>

using namespace std;

struct User {
    string username;
    string password;
};

struct Movie {
    string title;
    string schedule;
    int price;
};

class UserManager {
private:
    vector<User> users;

public:
    void registerUser() {
        User newUser;
        cout << "Masukkan nama pengguna: ";
        cin >> newUser.username;
        cout << "Masukkan kata sandi: ";
        cin >> newUser.password;
        users.push_back(newUser);
        cout << "Registrasi berhasil!\n";
    }

    bool loginUser(string username, string password) {
        for (const auto& user : users) {
            if (user.username == username && user.password == password) {
                return true;
            }
        }
        return false;
    }
};

class MovieManager {
public:
    vector<Movie> movies;

public:
    void displayMovies() {
        cout << "Jadwal Film:\n";
        for (const auto& movie : movies) {
            cout << movie.title << " - " << movie.schedule << " - Rp" << movie.price << endl;
        }
    }

    int calculateTotalPrice(int price, int numTickets) {
        return price * numTickets;
    }
};



// Dikerjakan Oleh Galvin Citraka P.N

class Theater {
private:
    char* seats;

public:
    Theater(int numSeats) {
        seats = new char[numSeats];
        for (int i = 0; i < numSeats; ++i) {
            seats[i] = ' '; 
        }
    }

    ~Theater() {
        delete[] seats;
    }

    void displaySeats() {
        cout << "Kursi Teater:\n";
        for (int i = 0; i < sizeof(seats); ++i) {
            cout << seats[i] << " ";
        }
        cout << endl;
    }

    void chooseSeat() {
        cout << "Pilih kursi Anda (contoh: A1): ";
        string seat;
        cin >> seat;
    }
};

class TicketQueue {
private:
    queue<string> ticketQueue;

public:
    void addToQueue(string ticketDetails) {
        ticketQueue.push(ticketDetails);
    }

    void processQueue() {
        while (!ticketQueue.empty()) {
            string ticket = ticketQueue.front();
            cout << "Mengolah tiket: " << ticket << endl;
            printTicket(ticket); 
            generateBarcode(); 
            ticketQueue.pop();
            
        }
    }

    void printTicket(string ticketDetails) {
        cout << "===== Bioskop TIM 1 =====\n";
        cout << "===== Detail Ticket =====\n";
        cout << ticketDetails << endl;
    }

    void generateBarcode() {
        srand(time(NULL));
        int barcode = rand() % 10000 + 1;
        cout << "Barcode: " << barcode << endl;
    }
};


//Dikerjakan oleh Allisya Syakdari (2317051017)

int main() {
    UserManager userManager;
    MovieManager movieManager;

    movieManager.movies.push_back({"Conjuring", "13:50", 50000});
    movieManager.movies.push_back({"IT", "14:30", 45000});
    movieManager.movies.push_back({"Identity", "17.45", 40000});

    Theater theater(50);
    TicketQueue ticketQueue;

    bool loggedIn = false;
    while (!loggedIn) {
        cout<<" Bioskop TIM 1"<<endl;
        cout<<" Ilmu Komputer"<<endl;
        cout<<"================"<<endl;
        cout<<"* DAFTAR MENU *"<<endl;
        cout<<"================"<<endl;
        cout<<"1. Registrasi\n2. Login\n3. Keluar\nPilihan: ";
        int choice;
        cin >> choice;

        switch (choice) {
            case 1:
                userManager.registerUser();
                break;
            case 2: {
                string username, password;
                cout << "Masukkan nama pengguna: ";
                cin >> username;
                cout << "Masukkan kata sandi: ";
                cin >> password;
                if (userManager.loginUser(username, password)) {
                    cout << "Login berhasil!\n";
                    loggedIn = true;
                } else {
                    cout << "Login gagal. Nama pengguna atau kata sandi salah.\n";
                }
                break;
            }
            case 3:
                cout << "Terima kasih, sampai jumpa!\n";
                return 0;
            default:
                cout << "Pilihan tidak valid.\n";
        }
    }

    while (loggedIn) {
        movieManager.displayMovies();
        
        string chosenMovie, chosenSchedule;
        cout << "Pilih film yang ingin ditonton: ";
        cin >> chosenMovie;
        cout << "Pilih jam tayang: ";
        cin >> chosenSchedule;

        theater.displaySeats();
        theater.chooseSeat();

        int price = 0;
        for (const auto& movie : movieManager.movies) {
            if (movie.title == chosenMovie) {
                price = movie.price;
                break;
            }
        }

        int numTickets;
        cout << "Masukkan jumlah tiket yang ingin dipesan: ";
        cin >> numTickets;
       int totalPrice = movieManager.calculateTotalPrice(price, numTickets);


        string ticketDetails = chosenMovie + " - " + chosenSchedule + " - " + to_string(numTickets) + " - Rp" + to_string(totalPrice);
        ticketQueue.addToQueue(ticketDetails);

        char option;
        cout << "Apakah Anda ingin memesan tiket lagi? (y/n): ";
        cin >> option;
        if (option == 'n' || option == 'N') {
            cout << "Terima kasih telah menggunakan layanan kami!\n";
            loggedIn = false;
        }
    }

    ticketQueue.processQueue();
     
    return 0;
}
